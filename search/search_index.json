{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"SirEdvin's mods hub \u00b6 Here I will place documentation for my current minecraft mods (mostly ComputerCraft related). Current mod list: Turtlematic If you want to add content to this documentation or you want to fix any spelling issues, feel free to do that on Github. If you need help, join the Discord.","title":"Home"},{"location":"#siredvins-mods-hub","text":"Here I will place documentation for my current minecraft mods (mostly ComputerCraft related). Current mod list: Turtlematic If you want to add content to this documentation or you want to fix any spelling issues, feel free to do that on Github. If you need help, join the Discord.","title":"SirEdvin's mods hub"},{"location":"turtlematic/","text":"Turtlematic \u00b6 Turtlematic - is mod about making turtles so useful, so you will never need any other automation mod! Most of peripheral methods are collected into API methods. Every new automata core, that you will craft expand or evolve those abilities by methods and parameters will stay the same! Getting started \u00b6 Picture Soul vial recipe To start with the main part of this mod, you need to obtain a Soul vial and start gathering souls. To collect soul you just need to right click on soul sand with this vial, it consumes soul and transform soul sand into usual sand. You can track soul consumption progress by tooltip and image picture. After enough soul it will be transformed into \"Filled soul vial\" that can be used to craft your first automata ! Improving automata core \u00b6 TBD","title":"Home"},{"location":"turtlematic/#turtlematic","text":"Turtlematic - is mod about making turtles so useful, so you will never need any other automation mod! Most of peripheral methods are collected into API methods. Every new automata core, that you will craft expand or evolve those abilities by methods and parameters will stay the same!","title":"Turtlematic"},{"location":"turtlematic/#getting-started","text":"Picture Soul vial recipe To start with the main part of this mod, you need to obtain a Soul vial and start gathering souls. To collect soul you just need to right click on soul sand with this vial, it consumes soul and transform soul sand into usual sand. You can track soul consumption progress by tooltip and image picture. After enough soul it will be transformed into \"Filled soul vial\" that can be used to craft your first automata !","title":"Getting started"},{"location":"turtlematic/#improving-automata-core","text":"TBD","title":"Improving automata core"},{"location":"turtlematic/api/capture/","text":"Capture API \u00b6 Capture API allows moving block or entities with storing it internal data! So finally, you can move specific spawners and chests! Take a note, that released entity or block will be placed at front of turtle. Also, block can be placed only on empty space Danger Due to ComputerCraft limitations stored entity will be lost if you unequip turtle upgrade. Function Returns Description capture(mode: InteractionMode , direction: Direction ?) Result Tries to capture object: entity or block release() Result Tiers to release object: create entity or place block getCaptured() table Returns information about captured entity (including NBT data) My modpack have blocks or entities, that crash game when captured, what I can do? Add tag turtlematic:capture_blacklist to those blocks or entities.","title":"Capture API"},{"location":"turtlematic/api/capture/#capture-api","text":"Capture API allows moving block or entities with storing it internal data! So finally, you can move specific spawners and chests! Take a note, that released entity or block will be placed at front of turtle. Also, block can be placed only on empty space Danger Due to ComputerCraft limitations stored entity will be lost if you unequip turtle upgrade. Function Returns Description capture(mode: InteractionMode , direction: Direction ?) Result Tries to capture object: entity or block release() Result Tiers to release object: create entity or place block getCaptured() table Returns information about captured entity (including NBT data) My modpack have blocks or entities, that crash game when captured, what I can do? Add tag turtlematic:capture_blacklist to those blocks or entities.","title":"Capture API"},{"location":"turtlematic/api/configuration/","text":"Configuration API \u00b6 Configuration API allows a peripheral user to understand current peripheral limitations and how you can use it. Any additional limit, that provided by peripheral can be retrieved from getConfiguration() method. Values, that can be retrieved with help of this method are marked like valueInConfiguration in this documentation. Function Returns Description getConfiguration() table Returns table with configuration.","title":"Configuration API"},{"location":"turtlematic/api/configuration/#configuration-api","text":"Configuration API allows a peripheral user to understand current peripheral limitations and how you can use it. Any additional limit, that provided by peripheral can be retrieved from getConfiguration() method. Values, that can be retrieved with help of this method are marked like valueInConfiguration in this documentation. Function Returns Description getConfiguration() table Returns table with configuration.","title":"Configuration API"},{"location":"turtlematic/api/fuel/","text":"Fuel API \u00b6 Most of the usage for fuel API comes when you're trying to degrease cooldown for specific operations. If you increase fuel consumption rate for peripheral, automatically it will decrease cooldowns after peripheral method usage (but not initial cooldowns). For example, if click operation required 1 fuel point to perform and will have 5 seconds cooldown, with fuel consumption 2 you can perform click operation one in 2.5 seconds, but in cost of 2 fuel point. Take a note that fuel point will grow faster, than cooldown drops. Basically, consumedFuel = 2^(fuelConsumtionRate - 1) . So fuelConsumtionRate 3 will require 4 fuel points, and fuelConsumtionRate 4 will require 8 fuel points, etc. Warning fuelConsumptionRate should be positive integer Function Returns Description getFuelLevel() number Returns current fuel level, for turtle is equivalent for turtle.getFuelLevel() getFuelMaxLevel() number Returns max fuel level, for turtle is equivalent for turtle.getFuelLimit() getFuelConsumptionRate() number Return current fuel consumption rate setFuelConsumptionRate(rate: number) nil Tries to set fuel consumption rate to new value. Will throw error if rate lower than 1 or bigger than maxFuelConsumptionRate","title":"Fuel API"},{"location":"turtlematic/api/fuel/#fuel-api","text":"Most of the usage for fuel API comes when you're trying to degrease cooldown for specific operations. If you increase fuel consumption rate for peripheral, automatically it will decrease cooldowns after peripheral method usage (but not initial cooldowns). For example, if click operation required 1 fuel point to perform and will have 5 seconds cooldown, with fuel consumption 2 you can perform click operation one in 2.5 seconds, but in cost of 2 fuel point. Take a note that fuel point will grow faster, than cooldown drops. Basically, consumedFuel = 2^(fuelConsumtionRate - 1) . So fuelConsumtionRate 3 will require 4 fuel points, and fuelConsumtionRate 4 will require 8 fuel points, etc. Warning fuelConsumptionRate should be positive integer Function Returns Description getFuelLevel() number Returns current fuel level, for turtle is equivalent for turtle.getFuelLevel() getFuelMaxLevel() number Returns max fuel level, for turtle is equivalent for turtle.getFuelLimit() getFuelConsumptionRate() number Return current fuel consumption rate setFuelConsumptionRate(rate: number) nil Tries to set fuel consumption rate to new value. Will throw error if rate lower than 1 or bigger than maxFuelConsumptionRate","title":"Fuel API"},{"location":"turtlematic/api/interaction/","text":"Interaction API \u00b6 Interaction API allows to fully simulate player left and right clicks. However, instead of simple simulation this API provides some benefits: All loot will be automatically collected For some core tiers tool will not be damaged Left clicks are always charged. So sword will always hit with full power Function Returns Description use(mode: InteractionMode , direction: Direction ?) Result Emulates rightClick with item in selected slot swing(mode: InteractionMode , direction: Direction ?) Result Emulates leftClick with item in selected slot","title":"Interaction API"},{"location":"turtlematic/api/interaction/#interaction-api","text":"Interaction API allows to fully simulate player left and right clicks. However, instead of simple simulation this API provides some benefits: All loot will be automatically collected For some core tiers tool will not be damaged Left clicks are always charged. So sword will always hit with full power Function Returns Description use(mode: InteractionMode , direction: Direction ?) Result Emulates rightClick with item in selected slot swing(mode: InteractionMode , direction: Direction ?) Result Emulates leftClick with item in selected slot","title":"Interaction API"},{"location":"turtlematic/api/introduction/","text":"Turtlematic APIs \u00b6 This section of documentation will describe everything about APIs, that can be provided by different peripherals and general information how to read function tables. Take a note, that some turtle upgrades (actually, a lot of them) will have extra functions besides supported APIs. Parameters description \u00b6 Functions defined like call_name(required_arg_1: arg_type_1, required_arg_2: arg_type_2, optional_arg: arg_type_3) . Some types will have additional limitations, like \"only positive numbers\", or \"only numbers in specific range\". In case when limitations are not met, function will throw exception. New data types \u00b6 Mostly this sections contains enums, that are need to be passed as strings. Enums are case-insensetive, so you can pass them as you want. Name Lua type Limitations interactionMode string Enum with values: any, block, entity areaInteractionMode string Enum with values: item, block, entity direction string Enum with values: up, down Result boolean, string? - Interaction mode \u00b6 All functions, that accept interactionMode as arguments, work with objects in line of sight. They will take as target the first object, that they found. You can force this functions to work only with blocks, or only with entities. Info You can get available interactionMode for specific APIs on core documentation page Warning Pretty important to note that a lot of entity interaction will be limited to specific entities. For example, Husbandry Automata Core allows to works only with animals. Always checks core documentation page to understand its limitation with entities. Area interaction mode \u00b6 All functions, that accept areaInteractionMode as arguments, work with objects in specific radius around it. You can get this radius via getConfiguration() method. Use this parameter to select what objects should to used for operation. Info You can get available areaInteractionMode for specific APIs on core documentation page Warning Pretty important to note that a lot of entity interaction will be limited to specific entities. For example, Husbandry Automata Core allows to works only with animals. Always checks core documentation page to understand its limitation with entities. Direction \u00b6 All functions, that accept direction as arguments, work with objects in line of sight. You can use this argument to change lint of sight and turtle will begin to start to look down (or up). Result \u00b6 Result are always representing result of called operation. First argument will tell you is operation was successful and second one will tell you reason why operation is failed.","title":"Turtlematic APIs"},{"location":"turtlematic/api/introduction/#turtlematic-apis","text":"This section of documentation will describe everything about APIs, that can be provided by different peripherals and general information how to read function tables. Take a note, that some turtle upgrades (actually, a lot of them) will have extra functions besides supported APIs.","title":"Turtlematic APIs"},{"location":"turtlematic/api/introduction/#parameters-description","text":"Functions defined like call_name(required_arg_1: arg_type_1, required_arg_2: arg_type_2, optional_arg: arg_type_3) . Some types will have additional limitations, like \"only positive numbers\", or \"only numbers in specific range\". In case when limitations are not met, function will throw exception.","title":"Parameters description"},{"location":"turtlematic/api/introduction/#new-data-types","text":"Mostly this sections contains enums, that are need to be passed as strings. Enums are case-insensetive, so you can pass them as you want. Name Lua type Limitations interactionMode string Enum with values: any, block, entity areaInteractionMode string Enum with values: item, block, entity direction string Enum with values: up, down Result boolean, string? -","title":"New data types"},{"location":"turtlematic/api/introduction/#interaction-mode","text":"All functions, that accept interactionMode as arguments, work with objects in line of sight. They will take as target the first object, that they found. You can force this functions to work only with blocks, or only with entities. Info You can get available interactionMode for specific APIs on core documentation page Warning Pretty important to note that a lot of entity interaction will be limited to specific entities. For example, Husbandry Automata Core allows to works only with animals. Always checks core documentation page to understand its limitation with entities.","title":"Interaction mode"},{"location":"turtlematic/api/introduction/#area-interaction-mode","text":"All functions, that accept areaInteractionMode as arguments, work with objects in specific radius around it. You can get this radius via getConfiguration() method. Use this parameter to select what objects should to used for operation. Info You can get available areaInteractionMode for specific APIs on core documentation page Warning Pretty important to note that a lot of entity interaction will be limited to specific entities. For example, Husbandry Automata Core allows to works only with animals. Always checks core documentation page to understand its limitation with entities.","title":"Area interaction mode"},{"location":"turtlematic/api/introduction/#direction","text":"All functions, that accept direction as arguments, work with objects in line of sight. You can use this argument to change lint of sight and turtle will begin to start to look down (or up).","title":"Direction"},{"location":"turtlematic/api/introduction/#result","text":"Result are always representing result of called operation. First argument will tell you is operation was successful and second one will tell you reason why operation is failed.","title":"Result"},{"location":"turtlematic/api/look/","text":"Look API \u00b6 Look API are mostly just improved inspect from ComputerCraft Turtle API. It is not pretty useful by itself, but it helps to understand who will be targeted of another APIs, like Interaction API or Capture API . Function Returns Description look(mode: InteractionMode , direction: Direction ?) table Returns detailed information about first target in line of sight. Look output examples Entity Block { \"type\" : \"Cow\" , \"name\" : \"Cow\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" } { \"name\" : \"Grass Block\" , \"tags\" : [ \"minecraft:valid_spawn\" , \"minecraft:lush_ground_replaceable\" , \"minecraft:big_dripleaf_placeable\" , \"minecraft:animals_spawnable_on\" , \"computercraft:turtle_shovel_harvestable\" , \"minecraft:moss_replaceable\" , \"minecraft:azalea_root_replaceable\" , \"minecraft:rabbits_spawnable_on\" , \"minecraft:foxes_spawnable_on\" , \"minecraft:parrots_spawnable_on\" , \"minecraft:dirt\" , \"minecraft:enderman_holdable\" , \"minecraft:mineable/shovel\" , \"minecraft:bamboo_plantable_on\" , \"minecraft:azalea_grows_on\" , \"minecraft:wolves_spawnable_on\" ] }","title":"Look API"},{"location":"turtlematic/api/look/#look-api","text":"Look API are mostly just improved inspect from ComputerCraft Turtle API. It is not pretty useful by itself, but it helps to understand who will be targeted of another APIs, like Interaction API or Capture API . Function Returns Description look(mode: InteractionMode , direction: Direction ?) table Returns detailed information about first target in line of sight. Look output examples Entity Block { \"type\" : \"Cow\" , \"name\" : \"Cow\" , \"category\" : \"CREATURE\" , \"id\" : 1269 , \"tags\" : {}, \"uuid\" : \"0737fd25-a1b6-4a1a-9cdd-3081e0155bb6\" } { \"name\" : \"Grass Block\" , \"tags\" : [ \"minecraft:valid_spawn\" , \"minecraft:lush_ground_replaceable\" , \"minecraft:big_dripleaf_placeable\" , \"minecraft:animals_spawnable_on\" , \"computercraft:turtle_shovel_harvestable\" , \"minecraft:moss_replaceable\" , \"minecraft:azalea_root_replaceable\" , \"minecraft:rabbits_spawnable_on\" , \"minecraft:foxes_spawnable_on\" , \"minecraft:parrots_spawnable_on\" , \"minecraft:dirt\" , \"minecraft:enderman_holdable\" , \"minecraft:mineable/shovel\" , \"minecraft:bamboo_plantable_on\" , \"minecraft:azalea_grows_on\" , \"minecraft:wolves_spawnable_on\" ] }","title":"Look API"},{"location":"turtlematic/api/operation/","text":"Operation API \u00b6 Operation API mostly responsible for those peripheral methods, that are somehow influence surrounding worlds. Most of these operations will have cooldowns - so you can't call them without delay. Also, some operation with long cooldowns we have it at each turtle start or upgrade equipment, so take this in account. You can configure cooldowns in the configuration file. Also, threshold for initial cooldown also can be configured via initialCooldownSensetiveLevel or even disabled with isInitialCooldownEnabled settings key. Function Returns Description getCooldown(operationName: string) number Returns times in milliseconds of left cooldown getOperations() table (list of strings) Returns all available operations","title":"Operation API"},{"location":"turtlematic/api/operation/#operation-api","text":"Operation API mostly responsible for those peripheral methods, that are somehow influence surrounding worlds. Most of these operations will have cooldowns - so you can't call them without delay. Also, some operation with long cooldowns we have it at each turtle start or upgrade equipment, so take this in account. You can configure cooldowns in the configuration file. Also, threshold for initial cooldown also can be configured via initialCooldownSensetiveLevel or even disabled with isInitialCooldownEnabled settings key. Function Returns Description getCooldown(operationName: string) number Returns times in milliseconds of left cooldown getOperations() table (list of strings) Returns all available operations","title":"Operation API"},{"location":"turtlematic/api/scan/","text":"Scan API \u00b6 Axises Illustrative description of relative coordinate axes for turtle Scan API is an interesting one. It allows use to analyze environment around turtle in specific radius . However, result always will be orientation-related, direction in which turtle facing will be counted as X axis and direction at right of turtle will be counted as Z axis. This behavior will match Minecraft world axes when turtle facing east. Warning radius should be positive integer Function Returns Description scan(mode: AreaInteractionMode , radius?: number) table Scan surrounded area for objects with selected mode. Radius is optional, by default it will be max radius for core Scan output examples Items Entity Block [ { \"x\" : -1 , \"y\" : 0 , \"z\" : 0 , \"count\" : 2 , \"maxStackSize\" : 64 , \"tags\" : [ \"minecraft:piglin_loved\" , \"computercraft:turtle\" ], \"technicalName\" : \"computercraft:turtle_advanced\" , \"name\" : \"Advanced Wireless Automata Turtle\" }, { \"x\" : 0 , \"y\" : 0 , \"z\" : -1 , \"count\" : 1 , \"maxStackSize\" : 64 , \"tags\" : [ \"minecraft:piglin_loved\" , \"computercraft:computer\" ], \"technicalName\" : \"computercraft:computer_advanced\" , \"name\" : \"Advanced Computer\" } ] [ { \"type\" : \"Panda\" , \"tags\" : {}, \"id\" : 19 , \"y\" : 0 , \"x\" : -16 , \"name\" : \"Panda\" , \"category\" : \"CREATURE\" , \"z\" : -17 , \"uuid\" : \"f5bd1195-9466-4106-ab94-0c9a854b6b5f\" }, { \"type\" : \"Panda\" , \"tags\" : {}, \"id\" : 39 , \"y\" : 0 , \"x\" : 11 , \"name\" : \"Pretty awesome panda\" , \"category\" : \"CREATURE\" , \"z\" : -12 , \"uuid\" : \"db90ecf0-57f6-40b2-8c2a-0d959d477937\" } ] [ { \"y\" : -1 , \"x\" : -1 , \"name\" : \"Polished Granite\" , \"z\" : 1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"Polished Granite\" , \"z\" : 1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"Polished Granite\" , \"z\" : 1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"Polished Granite\" , \"z\" : 0 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"Polished Granite\" , \"z\" : 0 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"Polished Granite\" , \"z\" : 0 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : 0 , \"x\" : 0 , \"name\" : \"Advanced Turtle\" , \"z\" : 0 , \"tags\" : [ \"computercraft:turtle\" , \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"Polished Granite\" , \"z\" : -1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"Polished Granite\" , \"z\" : -1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"Polished Granite\" , \"z\" : -1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] } ]","title":"Scan API"},{"location":"turtlematic/api/scan/#scan-api","text":"Axises Illustrative description of relative coordinate axes for turtle Scan API is an interesting one. It allows use to analyze environment around turtle in specific radius . However, result always will be orientation-related, direction in which turtle facing will be counted as X axis and direction at right of turtle will be counted as Z axis. This behavior will match Minecraft world axes when turtle facing east. Warning radius should be positive integer Function Returns Description scan(mode: AreaInteractionMode , radius?: number) table Scan surrounded area for objects with selected mode. Radius is optional, by default it will be max radius for core Scan output examples Items Entity Block [ { \"x\" : -1 , \"y\" : 0 , \"z\" : 0 , \"count\" : 2 , \"maxStackSize\" : 64 , \"tags\" : [ \"minecraft:piglin_loved\" , \"computercraft:turtle\" ], \"technicalName\" : \"computercraft:turtle_advanced\" , \"name\" : \"Advanced Wireless Automata Turtle\" }, { \"x\" : 0 , \"y\" : 0 , \"z\" : -1 , \"count\" : 1 , \"maxStackSize\" : 64 , \"tags\" : [ \"minecraft:piglin_loved\" , \"computercraft:computer\" ], \"technicalName\" : \"computercraft:computer_advanced\" , \"name\" : \"Advanced Computer\" } ] [ { \"type\" : \"Panda\" , \"tags\" : {}, \"id\" : 19 , \"y\" : 0 , \"x\" : -16 , \"name\" : \"Panda\" , \"category\" : \"CREATURE\" , \"z\" : -17 , \"uuid\" : \"f5bd1195-9466-4106-ab94-0c9a854b6b5f\" }, { \"type\" : \"Panda\" , \"tags\" : {}, \"id\" : 39 , \"y\" : 0 , \"x\" : 11 , \"name\" : \"Pretty awesome panda\" , \"category\" : \"CREATURE\" , \"z\" : -12 , \"uuid\" : \"db90ecf0-57f6-40b2-8c2a-0d959d477937\" } ] [ { \"y\" : -1 , \"x\" : -1 , \"name\" : \"Polished Granite\" , \"z\" : 1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"Polished Granite\" , \"z\" : 1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"Polished Granite\" , \"z\" : 1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"Polished Granite\" , \"z\" : 0 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"Polished Granite\" , \"z\" : 0 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"Polished Granite\" , \"z\" : 0 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : 0 , \"x\" : 0 , \"name\" : \"Advanced Turtle\" , \"z\" : 0 , \"tags\" : [ \"computercraft:turtle\" , \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : -1 , \"name\" : \"Polished Granite\" , \"z\" : -1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 0 , \"name\" : \"Polished Granite\" , \"z\" : -1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] }, { \"y\" : -1 , \"x\" : 1 , \"name\" : \"Polished Granite\" , \"z\" : -1 , \"tags\" : [ \"minecraft:mineable/pickaxe\" ] } ]","title":"Scan API"},{"location":"turtlematic/api/warp/","text":"Warp API \u00b6 Warp API essentially comes from harvesting power of The End itself. It allows you to jump to previously stored points instantly and with reduced cost. Danger Due to ComputerCraft limitations all stored points data will be lost if you unequip turtle upgrade. Danger This API is dimension-bound. If you somehow change turtle dimension this will require full reset Warning Points are limited per upgrade. It controlled by endAutomataCoreWarpPointLimit Minecraft settings and by default it is 64 Function Returns Description savePoint(name: string) Result Saves current turtle location into data for future use deletePoint(name: string) Result Delete points if it exists warpToPoint(name: string) Result Teleport turtle to stored point if turtle has enough fuel points() table Returns list of point names estimateWarpCost(name: string) number Returns cost of warp in fuel distanceToPoint(name: string number Return manhattan distance to point","title":"Warp API"},{"location":"turtlematic/api/warp/#warp-api","text":"Warp API essentially comes from harvesting power of The End itself. It allows you to jump to previously stored points instantly and with reduced cost. Danger Due to ComputerCraft limitations all stored points data will be lost if you unequip turtle upgrade. Danger This API is dimension-bound. If you somehow change turtle dimension this will require full reset Warning Points are limited per upgrade. It controlled by endAutomataCoreWarpPointLimit Minecraft settings and by default it is 64 Function Returns Description savePoint(name: string) Result Saves current turtle location into data for future use deletePoint(name: string) Result Delete points if it exists warpToPoint(name: string) Result Teleport turtle to stored point if turtle has enough fuel points() table Returns list of point names estimateWarpCost(name: string) number Returns cost of warp in fuel distanceToPoint(name: string number Return manhattan distance to point","title":"Warp API"},{"location":"turtlematic/automata/automata/","text":"Automata \u00b6 Your first automata core, that starts your journey into mystery turtlematic world. Picture Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed","title":"Base automata"},{"location":"turtlematic/automata/automata/#automata","text":"Your first automata core, that starts your journey into mystery turtlematic world. Picture","title":"Automata"},{"location":"turtlematic/automata/automata/#supported-apis","text":"Configuration API Fuel API Operation API Look API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed","title":"Supported APIs"},{"location":"turtlematic/automata/end/","text":"End automata \u00b6 Advanced automata that can harness power of the End. Picture Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed Warp API Capture API : only interaction with blocks are allowed","title":"End automata"},{"location":"turtlematic/automata/end/#end-automata","text":"Advanced automata that can harness power of the End. Picture","title":"End automata"},{"location":"turtlematic/automata/end/#supported-apis","text":"Configuration API Fuel API Operation API Look API Interaction API : only interaction with blocks are allowed Scan API : only interaction with items are allowed Warp API Capture API : only interaction with blocks are allowed","title":"Supported APIs"},{"location":"turtlematic/automata/husbandry/","text":"Husbandry automata \u00b6 Advanced automata that can harness power of the nature. Picture Supported APIs \u00b6 Configuration API Fuel API Operation API Look API Interaction API : allows interaction with blocks and animals Scan API : allows interaction with items and animals Capture API : only interaction with animals How automata will detect that entity is animal? If at least one of criteria met: Entity is friendly Entity have \"creature\" category Entity have turtlematic:husbandry_extra_animal tag","title":"Husbandry automata"},{"location":"turtlematic/automata/husbandry/#husbandry-automata","text":"Advanced automata that can harness power of the nature. Picture","title":"Husbandry automata"},{"location":"turtlematic/automata/husbandry/#supported-apis","text":"Configuration API Fuel API Operation API Look API Interaction API : allows interaction with blocks and animals Scan API : allows interaction with items and animals Capture API : only interaction with animals How automata will detect that entity is animal? If at least one of criteria met: Entity is friendly Entity have \"creature\" category Entity have turtlematic:husbandry_extra_animal tag","title":"Supported APIs"},{"location":"turtlematic/miscellaneous/creative_chest/","text":"Creative chest \u00b6 Why the hell in creative mode turtle can't generate items? Tell no more, this upgrade just for you. Picture Function Returns Description generate(item: string, count: number, nbtData: string?) Result Tries to put required item with required count into turtle inventory How in hell does nbtData works? NBT data passing from ComputerCraft to Minecraft are ... complicated task. So currently, nbtData are just string that expected to be minecraft NBT data serialized into json. You can try generate(\"minecraft:potion\", 1, \"{Potion:\\\"minecraft:long_regeneration\\\"}\") to understand how it works","title":"Creative chest"},{"location":"turtlematic/miscellaneous/creative_chest/#creative-chest","text":"Why the hell in creative mode turtle can't generate items? Tell no more, this upgrade just for you. Picture Function Returns Description generate(item: string, count: number, nbtData: string?) Result Tries to put required item with required count into turtle inventory How in hell does nbtData works? NBT data passing from ComputerCraft to Minecraft are ... complicated task. So currently, nbtData are just string that expected to be minecraft NBT data serialized into json. You can try generate(\"minecraft:potion\", 1, \"{Potion:\\\"minecraft:long_regeneration\\\"}\") to understand how it works","title":"Creative chest"},{"location":"turtlematic/miscellaneous/turtle_chatter/","text":"Turtle chatter \u00b6 Turtle chatter is a small module that allows you to display messages above turtle. Info Text will be additionally wrapped and text will be shifted to new line in case when it is longer than 160 pixels. Line breaker symbol \\n works. Currently message can be only 6 lines, extra lines will be ignored. Warning This upgrade is experimental. Text render can sometimes be pretty ugly, also this is possible for API changes Function Returns Description getMessage() string? Returns current stored message setMessage(text: string) nil Update stored message clearMessage() nil Clears stored message How can I get colored text? You can pass minecraft formatting symbols. For example setMessage(\"\\xA74Red message\") will generate red message, because \\xA7 converts into \u00a7 and 4 is dark red.","title":"Turtle chatter"},{"location":"turtlematic/miscellaneous/turtle_chatter/#turtle-chatter","text":"Turtle chatter is a small module that allows you to display messages above turtle. Info Text will be additionally wrapped and text will be shifted to new line in case when it is longer than 160 pixels. Line breaker symbol \\n works. Currently message can be only 6 lines, extra lines will be ignored. Warning This upgrade is experimental. Text render can sometimes be pretty ugly, also this is possible for API changes Function Returns Description getMessage() string? Returns current stored message setMessage(text: string) nil Update stored message clearMessage() nil Clears stored message How can I get colored text? You can pass minecraft formatting symbols. For example setMessage(\"\\xA74Red message\") will generate red message, because \\xA7 converts into \u00a7 and 4 is dark red.","title":"Turtle chatter"}]}